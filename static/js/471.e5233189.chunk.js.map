{"version":3,"file":"static/js/471.e5233189.chunk.js","mappings":"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","sources":["Styles/Container.styled.js","components/MovieItem/MovieItem.styled.js","components/MovieItem/MovieItem.jsx","components/MovieList/MovieList.styled.js","components/MovieList/MovieList.jsx","components/Category/Category.styled.js","components/Category/Category.jsx","components/FilterBar/FilterBar.styled.js","components/FilterBar/FilterBar.jsx","pages/Home.jsx","redux/films/films.selectors.js","service/genreFetcher.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledContainer = styled.div`\n  max-width: 1200px;\n  margin-left: auto;\n  margin-right: auto;\n  background-color: #0d1117;\n  border-top: 1px solid grey;\n  /* .header {\n    height: 60px;\n    display: flex;\n    align-items: center;\n    box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;\n    border-radius: 10px;\n    margin-bottom: 25px;\n  }\n\n  .header-link {\n    padding: 20px;\n    text-decoration: none;\n    font-weight: 500;\n    color: black;\n    &:hover {\n      color: red;\n    }\n    &.active {\n      color: red;\n    }\n  } */\n\n  /* .back-btn {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin-bottom: 20px;\n    text-align: center;\n    text-decoration: none;\n    color: black;\n    width: 100px;\n    height: 40px;\n    border: 1px solid black;\n    border-radius: 10px;\n    &:hover {\n      color: red;\n      border: 1px solid red;\n    }\n  }\n  .movie-info-cover {\n    display: flex;\n    box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;\n    border-radius: 10px;\n    margin-bottom: 25px;\n  }\n  .poster-image {\n    margin-right: 20px;\n    border-radius: 10px;\n  }\n\n  .details-link {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    margin-right: 20px;\n    text-align: center;\n    text-decoration: none;\n    color: black;\n    width: 80px;\n    height: 40px;\n    border: 1px solid black;\n    border-radius: 10px;\n\n    &.active {\n      color: red;\n      border: 1px solid red;\n    }\n    &:hover {\n      color: red;\n      border: 1px solid red;\n    }\n  }\n\n  .bold {\n    font-weight: 700;\n  } */\n`;\n","import styled from 'styled-components';\n\nexport const StyledItem = styled.li`\n  width: 184px;\n\n  padding-left: 8px;\n  padding-right: 8px;\n  padding-bottom: 8px;\n\n  .movie-title {\n    color: white;\n  }\n\n  .cover {\n    height: 100%;\n  }\n`;\n\nexport const StyledItemPoster = styled.img`\n  margin-left: auto;\n  margin-right: auto;\n  margin-bottom: 8px;\n  border-radius: 4px;\n`;\n\nexport const ShortInfo = styled.span`\n  font-size: 12px;\n  color: #ad9236;\n`;\n","import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport { extractYear, genreFetcher } from 'service/genreFetcher';\nimport { BASE_POSTER_URL } from 'service/moviesAPI';\nimport { ShortInfo, StyledItem, StyledItemPoster } from './MovieItem.styled';\n\nconst MovieItem = ({ movie }) => {\n  const location = useLocation();\n\n  const { id, poster_path, title, release_date, genre_ids } = movie;\n  const genres = genreFetcher(genre_ids);\n\n  return (\n    <StyledItem key={id}>\n      <Link\n        state={{ from: location }}\n        to={`/movies/${id}`}\n        className=\"movie-title\"\n      >\n        <div className=\"cover\">\n          <StyledItemPoster\n            src={BASE_POSTER_URL + poster_path}\n            alt={title + ' poster'}\n          />\n          <p>{title}</p>\n          <p>\n            <ShortInfo>{extractYear(release_date)},</ShortInfo>{' '}\n            {genres.slice(0, 2).map((genre, index) => {\n              return (\n                <ShortInfo key={index}>\n                  {genre}\n                  {index < genres.length - 1 ? ',' : ''}{' '}\n                </ShortInfo>\n              );\n            })}\n          </p>\n        </div>\n      </Link>\n    </StyledItem>\n  );\n};\n\nexport default MovieItem;\n","import styled from 'styled-components';\n\nexport const StyledList = styled.ul`\n  display: flex;\n  gap: 24px;\n  flex-wrap: wrap;\n  justify-content: center;\n  margin-bottom: 24px;\n`;\n","import MovieItem from 'components/MovieItem/MovieItem';\nimport React from 'react';\nimport { StyledList } from './MovieList.styled';\n\nconst MovieList = ({ topDayMovie }) => {\n  return (\n    <StyledList>\n      {topDayMovie.map(movie => {\n        return <MovieItem movie={movie} key={movie.id} />;\n      })}\n    </StyledList>\n  );\n};\n\nexport default MovieList;\n","import styled from 'styled-components';\n\nexport const CategoryStyled = styled.div`\n  padding-bottom: 34px;\n  padding-top: 20px;\n  padding-left: 20px;\n  padding-right: 20px;\n\n  border-bottom: 1px solid grey;\n`;\n\nexport const CategoryTitleStyled = styled.p`\n  font-size: 24px;\n  margin-bottom: 18px;\n`;\n\nexport const ShowMoreBtn = styled.button`\n  display: block;\n  height: 35px;\n  margin-left: auto;\n\n  font-size: 16px;\n  color: gray;\n  background-color: transparent;\n\n  border: 2px solid #ad9236;\n  border-radius: 10px;\n\n  &:hover {\n    border: 2px solid red;\n    color: #ad9236;\n  }\n`;\n","import MovieList from 'components/MovieList/MovieList';\nimport React, { useState } from 'react';\nimport {\n  CategoryStyled,\n  CategoryTitleStyled,\n  ShowMoreBtn,\n} from './Category.styled';\n\nconst Category = ({ moviesFromCategory, categoryTitle }) => {\n  const [visibleItems, setVisibleItems] = useState(5);\n  const [showAll, setShowAll] = useState(false);\n\n  const toggleShowItems = () => {\n    if (showAll) {\n      setVisibleItems(5);\n    } else {\n      setVisibleItems(moviesFromCategory.length);\n    }\n    setShowAll(!showAll);\n  };\n\n  return (\n    <CategoryStyled>\n      <CategoryTitleStyled>{categoryTitle}</CategoryTitleStyled>\n      <MovieList topDayMovie={moviesFromCategory.slice(0, visibleItems)} />\n      <ShowMoreBtn onClick={toggleShowItems}>\n        {showAll ? 'Приховати' : 'Показати більше'}\n      </ShowMoreBtn>\n    </CategoryStyled>\n  );\n};\n\nexport default Category;\n","import styled from 'styled-components';\n\nexport const StyledForm = styled.form`\n  padding: 20px;\n  display: flex;\n  justify-content: center;\n  gap: 20px;\n  align-items: flex-end;\n`;\n\nexport const FormGroup = styled.div``;\n\nexport const FormLabel = styled.label`\n  display: block;\n  font-size: 14px;\n  margin-bottom: 5px;\n`;\n\nexport const FormInput = styled.input`\n  padding: 10px;\n  border: 1px solid #555;\n  border-radius: 4px;\n  background-color: #222;\n  color: #fff;\n\n  &.input-error {\n    border-color: #ff6347;\n  }\n`;\n\nexport const FormSelect = styled.select`\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #555;\n  border-radius: 4px;\n  background-color: #222;\n  color: #fff;\n`;\n\nexport const ErrorMessage = styled.span`\n  color: #ff6347;\n  font-size: 12px;\n  margin-left: 5px;\n`;\n\nexport const SubmitButton = styled.button`\n  display: block;\n  height: 37px;\n  padding: 0 10px;\n  border: none;\n  border-radius: 4px;\n  background-color: #ff6347;\n  color: #fff;\n  cursor: pointer;\n  font-size: 16px;\n\n  &:hover {\n    background-color: #ff4500;\n  }\n`;\n","import React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectGenres } from '../../redux/films/films.selectors';\nimport {\n  ErrorMessage,\n  FormGroup,\n  FormInput,\n  FormLabel,\n  FormSelect,\n  StyledForm,\n  SubmitButton,\n} from './FilterBar.styled';\nimport { movieSortedThunk } from '../../redux/films/filmsOperations';\nimport { sortMethods } from '../../service/moviesAPI';\n\nconst FilterBar = () => {\n  const dispatch = useDispatch();\n  const genres = useSelector(selectGenres);\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm();\n\n  const onSubmit = data => {\n    dispatch(movieSortedThunk(data));\n  };\n\n  return (\n    <StyledForm onSubmit={handleSubmit(onSubmit)}>\n      <FormGroup className=\"form__group field\">\n        <div>\n          <FormLabel className=\"form__label\">Оберіть жанр</FormLabel>\n          {errors.genre && (\n            <ErrorMessage className=\"error-message\">{' *'}</ErrorMessage>\n          )}\n        </div>\n        <FormSelect {...register('genre')}>\n          <option value=\"\">Жанри</option>\n          {genres.map(option => (\n            <option key={option.id} value={option.id}>\n              {option.name}\n            </option>\n          ))}\n        </FormSelect>\n      </FormGroup>\n\n      <FormGroup className=\"form__group field\">\n        <div>\n          <FormLabel className=\"form__label\">Рік</FormLabel>\n          {errors.year && <span className=\"error-message\">{' *'}</span>}\n        </div>\n        <FormInput\n          {...register('year')}\n          type=\"number\"\n          autoComplete=\"off\"\n          className={errors.name ? 'form-input input-error' : 'form-input'}\n        />\n      </FormGroup>\n\n      <FormGroup className=\"form__group field\">\n        <div>\n          <FormLabel className=\"form__label\">Сортувати за</FormLabel>\n          {errors.method && (\n            <ErrorMessage className=\"error-message\">{' *'}</ErrorMessage>\n          )}\n        </div>\n        <FormSelect {...register('method')}>\n          {sortMethods.map(option => (\n            <option key={option.id} value={option.id}>\n              {option.name}\n            </option>\n          ))}\n        </FormSelect>\n      </FormGroup>\n\n      <SubmitButton type=\"submit\" className=\"send-btn\">\n        Сортувати\n      </SubmitButton>\n    </StyledForm>\n  );\n};\n\nexport default FilterBar;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Notiflix from 'notiflix';\nimport {\n  selectDayTopMovies,\n  selectMoviesError,\n  selectTopRatedMovies,\n  selectWeekTopMovies,\n  selectSearchedMovies,\n} from '../redux/films/films.selectors';\nimport {\n  topDayMoviesThunk,\n  topWeekMoviesThunk,\n  topRatedMoviesThunk,\n} from '../redux/films/filmsOperations';\nimport { StyledContainer } from 'Styles/Container.styled';\nimport Category from 'components/Category/Category';\nimport {\n  handlResetFilmData,\n  handlResetSearch,\n} from '../redux/films/filmsReduser';\nimport MovieList from 'components/MovieList/MovieList';\nimport FilterBar from 'components/FilterBar/FilterBar';\n\nconst Home = () => {\n  const topDayMovie = useSelector(selectDayTopMovies);\n  const topWeekMovie = useSelector(selectWeekTopMovies);\n  const topRatedMovies = useSelector(selectTopRatedMovies);\n  const searchedMovies = useSelector(selectSearchedMovies);\n  const movieError = useSelector(selectMoviesError);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(topDayMoviesThunk());\n    dispatch(topWeekMoviesThunk());\n    dispatch(topRatedMoviesThunk());\n    dispatch(handlResetFilmData());\n    dispatch(handlResetSearch());\n  }, [dispatch]);\n\n  return (\n    <section>\n      <StyledContainer>\n        <FilterBar />\n        {movieError && Notiflix.Notify.failure(movieError)}\n        {searchedMovies.length ? (\n          <MovieList topDayMovie={searchedMovies} />\n        ) : (\n          <>\n            <Category\n              moviesFromCategory={topDayMovie}\n              categoryTitle={'Топ Дня'}\n            />\n            <Category\n              moviesFromCategory={topWeekMovie}\n              categoryTitle={'Топ Тижня'}\n            />\n            <Category\n              moviesFromCategory={topRatedMovies}\n              categoryTitle={'Найпопулярніші'}\n            />\n          </>\n        )}\n      </StyledContainer>\n    </section>\n  );\n};\n\nexport default Home;\n","export const selectDayTopMovies = state => state.films.dayTopMovies;\nexport const selectWeekTopMovies = state => state.films.weekTopMovies;\nexport const selectTopRatedMovies = state => state.films.topRatedMovies;\nexport const selectSearchedMovies = state => state.films.searchedMovies;\nexport const selectGenres = state => state.films.genres;\nexport const selectFilmData = state => state.films.filmData;\nexport const selectData = state => state.films.filmData.data;\nexport const selectFilmCast = state => state.films.filmData.cast;\nexport const selectFilmReviews = state => state.films.filmData.reviews;\nexport const selectMoviesIsLoading = state => state.films.isLoading;\nexport const selectMoviesError = state => state.films.error;\n","export const genreFetcher = ids => {\n  const result = ids.map(id => {\n    switch (id) {\n      case 28:\n        return (id = 'Бойовик');\n\n      case 12:\n        return 'Пригоди';\n\n      case 16:\n        return 'Мультфільм';\n\n      case 35:\n        return 'Комедія';\n\n      case 80:\n        return 'Кримінал';\n\n      case 99:\n        return 'Документальний';\n\n      case 18:\n        return 'Драма';\n\n      case 10751:\n        return 'Сімейний';\n\n      case 14:\n        return 'Фентезі';\n\n      case 36:\n        return 'Історичний';\n\n      case 27:\n        return 'Жахи';\n\n      case 10402:\n        return 'Музика';\n\n      case 9648:\n        return 'Детектив';\n\n      case 10749:\n        return 'Мелодрама';\n\n      case 878:\n        return 'Фантастика';\n\n      case 10770:\n        return 'Телефільм';\n\n      case 53:\n        return 'Трилер';\n\n      case 10752:\n        return 'Військовий';\n\n      case 37:\n        return 'Вестерн';\n\n      default:\n        return 'Невідомий Жанр';\n    }\n  });\n\n  return result;\n};\n\nexport const extractYear = dateString => {\n  const parts = dateString.split('-');\n\n  return parts[0];\n};\n"],"names":["StyledContainer","styled","_templateObject","_taggedTemplateLiteral","StyledItem","StyledItemPoster","_templateObject2","ShortInfo","_templateObject3","_ref","movie","location","useLocation","id","poster_path","title","release_date","genre_ids","genres","genreFetcher","_jsx","children","Link","state","from","to","concat","className","_jsxs","src","BASE_POSTER_URL","alt","extractYear","slice","map","genre","index","length","StyledList","topDayMovie","MovieItem","CategoryStyled","CategoryTitleStyled","ShowMoreBtn","moviesFromCategory","categoryTitle","_useState","useState","_useState2","_slicedToArray","visibleItems","setVisibleItems","_useState3","_useState4","showAll","setShowAll","MovieList","onClick","StyledForm","FormGroup","FormLabel","FormInput","_templateObject4","FormSelect","_templateObject5","ErrorMessage","_templateObject6","SubmitButton","_templateObject7","dispatch","useDispatch","useSelector","selectGenres","_useForm","useForm","register","handleSubmit","errors","formState","onSubmit","data","movieSortedThunk","_objectSpread","value","option","name","year","type","autoComplete","method","sortMethods","selectDayTopMovies","topWeekMovie","selectWeekTopMovies","topRatedMovies","selectTopRatedMovies","searchedMovies","selectSearchedMovies","movieError","selectMoviesError","useEffect","topDayMoviesThunk","topWeekMoviesThunk","topRatedMoviesThunk","handlResetFilmData","handlResetSearch","FilterBar","Notiflix","_Fragment","Category","films","dayTopMovies","weekTopMovies","selectData","filmData","selectFilmCast","cast","error","ids","dateString","split"],"sourceRoot":""}